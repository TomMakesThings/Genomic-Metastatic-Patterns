c(5, 6, 14, 15, 23, 24), # PR progesterone
c(7, 16, 25), # p300 control
c(8, 9, 17, 18, 26, 27)), # p300 progesterone
samples = list(full_normalized$masks$ER,
full_normalized$masks$PR,
full_normalized$masks$p300),
labels = list(sites = c("ER-PR GAIN", "PR GAIN")))
#                                           samples = c("ER_Control", "ER_Progestin",
#                                                       "PR_Control", "PR_Progestin",
#                                                       "p300_Control", "p300_Progestin")))
# profiles <- dba.plotProfile(full_normalized,
#                             sites = gain_dbs,
#                             samples = list(ER = full_normalized$masks$ER,
#                                            PR = full_normalized$masks$PR,
#                                            p300 = full_normalized$masks$p300),
#                             merge = c(DBA_TISSUE, DBA_REPLICATE),
#                             labels = list(sites = c("PR GAIN", "ER-PR GAIN")))
# Show profile plot
dba.plotProfile(profiles)
names(full_normalized$masks)
# Get sites that gain binding affinity
gain_dbs <- dba.report(full_normalized, bDB = TRUE, bAll = FALSE, bGain = TRUE)
# Profile plot data
profiles <- dba.plotProfile(full_normalized,
sites = gain_dbs,
merge = list(ER = c(2, 3, 11, 12, 20, 21), # ER progesterone
PR = c(5, 6, 14, 15, 23, 24), # PR progesterone
p300 = c(8, 9, 17, 18, 26, 27)), # p300 progesterone
samples = list(ER = full_normalized$masks$ER,
PR = full_normalized$masks$PR,
p300 = full_normalized$masks$p300),
labels = list(sites = c("ER-PR GAIN", "PR GAIN")))
names(full_normalized$masks)
# Get sites that gain binding affinity
gain_dbs <- dba.report(full_normalized, bDB = TRUE, bAll = FALSE, bGain = TRUE)
# Profile plot data
profiles <- dba.plotProfile(full_normalized,
sites = gain_dbs,
merge = list(c(2, 3, 11, 12, 20, 21), # ER progesterone
c(5, 6, 14, 15, 23, 24), # PR progesterone
c(8, 9, 17, 18, 26, 27)), # p300 progesterone
samples = list(ER = full_normalized$masks$ER,
PR = full_normalized$masks$PR,
p300 = full_normalized$masks$p300),
labels = list(sites = c("ER-PR GAIN", "PR GAIN")))
names(full_normalized$masks)
# Get sites that gain binding affinity
gain_dbs <- dba.report(full_normalized, bDB = TRUE, bAll = FALSE, bGain = TRUE)
# Profile plot data
profiles <- dba.plotProfile(full_normalized,
sites = gain_dbs,
merge = list(c(1, 10, 19), # ER control
c(2, 3, 11, 12, 20, 21), # ER progesterone
c(4, 13, 22), # PR control
c(5, 6, 14, 15, 23, 24), # PR progesterone
c(7, 16, 25), # p300 control
c(8, 9, 17, 18, 26, 27)), # p300 progesterone
samples = list(ER = full_normalized$masks$ER,
PR = full_normalized$masks$PR,
p300 = full_normalized$masks$p300),
labels = list(sites = c("ER-PR GAIN", "PR GAIN")))
#                                           samples = c("ER_Control", "ER_Progestin",
#                                                       "PR_Control", "PR_Progestin",
#                                                       "p300_Control", "p300_Progestin")))
# profiles <- dba.plotProfile(full_normalized,
#                             sites = gain_dbs,
#                             samples = list(ER = full_normalized$masks$ER,
#                                            PR = full_normalized$masks$PR,
#                                            p300 = full_normalized$masks$p300),
#                             merge = c(DBA_TISSUE, DBA_REPLICATE),
#                             labels = list(sites = c("PR GAIN", "ER-PR GAIN")))
# Show profile plot
dba.plotProfile(profiles)
knitr::opts_chunk$set(echo = TRUE,
dev = "png",
fig.align='left',
dev.args =
list(png = list(type = "cairo-png")),
optipng = "-o1 -quiet")
options(bitmapType='cairo')
options(connectionObserver = NULL)
# Set working directory
knitr::opts_knit$set(root.dir="PRexercise")
library(DiffBind)
# Read the set of peaksets and metadata
peak_data <- dba(sampleSheet = read.csv('samplesheet_T47D_chr17.csv'))
peak_data
message(paste("Number of peaks before:", sum(dba.show(peak_data)$Intervals)))
# Remove certain regions in the reference genome from the analysis
peak_data <- dba.blacklist(peak_data, blacklist = TRUE)
message(paste("Number of peaks after:", sum(dba.show(peak_data)$Intervals)))
# Order low to high by number of intervals
dba.show(peak_data)[order(dba.show(peak_data)$Intervals),]
plot(peak_data)
dba.plotPCA(peak_data, label = DBA_TREATMENT)
# Print overlap vectors
overlap_rate <- dba.overlap(peak_data, mode = DBA_OLAP_RATE)
print(overlap_rate)
# Create graph of overlap
plot(overlap_rate, type = 'b', ylab = 'Rate', xlab = 'Index')
# Add a separate consensus peakset for each combination of factor and treatment
peak_consensus <- dba.peakset(peak_data, consensus = c(DBA_FACTOR, DBA_TREATMENT))
peak_consensus <- dba(peak_consensus, mask = peak_consensus$masks$Consensus)
dba.show(peak_consensus)[order(dba.show(peak_consensus)$Intervals),]
par(mfrow = c(2, 3))
dba.plotVenn(peak_consensus, peak_consensus$masks$ER, main = "ER")
dba.plotVenn(peak_consensus, peak_consensus$masks$PR, main = "PR")
dba.plotVenn(peak_consensus, peak_consensus$masks$p300, main = "p300")
dba.plotVenn(peak_consensus, peak_consensus$masks$FM, main = "FM")
dba.plotVenn(peak_consensus, peak_consensus$masks$PG, main = "PG")
dba.plotVenn(peak_consensus, peak_consensus$masks$RO, main = "RO")
consensus <- dba.peakset(peak_data, consensus = c(DBA_FACTOR, DBA_TREATMENT), minOverlap = 0.66)
consensus <- dba(consensus, mask = consensus$masks$Consensus, minOverlap = 1)
consensus
# Extract consensus peaks
consensus_peaks <- dba.peakset(consensus, bRetrieve = T)
# Re-center peaks and count overlap
suppressWarnings({
peak_counts <- dba.count(peak_data, peaks = consensus_peaks)
})
# Calculate peak width
message(as.data.frame(peak_counts$peaks[1])$End[1] - as.data.frame(peak_counts$peaks[1])$Start[1] + 1)
dba.show(peak_counts)[order(dba.show(peak_counts)$FRiP),]
peak_counts$config$RunParallel <- TRUE
profiles <- dba.plotProfile(peak_counts,
maxSites = 1500,
samples = list(ER = peak_counts$masks$ER,
PR = peak_counts$masks$PR,
p300 = peak_counts$masks$p300),
labels = c("ER_FM", "ER_PG", "ER_RO",
"PR_FM", "PR_PG", "PR_RO",
"p300_FM", "p300_PG", "p300_RO"))
dba.plotProfile(profiles)
dba.plotHeatmap(peak_counts)
dba.plotPCA(peak_counts, label = DBA_TREATMENT)
dba.plotPCA(peak_counts, DBA_REPLICATE)
dba.plotPCA(peak_counts, DBA_TREATMENT, label = DBA_FACTOR)
# names(peak_counts$masks)
par(mfrow = c(2, 2))
# Progestin vs Control
dba.plotMA(peak_counts,
list(Progestin = peak_counts$masks$ER_Progestin |
peak_counts$masks$PR_Progestin |
peak_counts$masks$p300_Progestin,
Control = peak_counts$masks$ER_Control |
peak_counts$masks$PR_Control |
peak_counts$masks$p300_Control),
bNormalized = FALSE)
# ER_Progestin vs ER_Control
dba.plotMA(peak_counts,
list(ER_Progestin = peak_counts$masks$ER_Progestin,
ER_Control = peak_counts$masks$ER_Control))
# PR_Progestin vs PR_Control
dba.plotMA(peak_counts,
list(PR_Progestin = peak_counts$masks$PR_Progestin,
PR_Control = peak_counts$masks$PR_Control),
bNormalized = FALSE)
# p300_Progestin vs p300_Control
dba.plotMA(peak_counts,
list(p300_Progestin = peak_counts$masks$p300_Progestin,
p300_Control = peak_counts$masks$p300_Control),
bNormalized = FALSE)
# Normalise by full library size
full_normalized <- dba.normalize(peak_counts, normalize = DBA_NORM_LIB)
# Library size based on number of reads that overlap consensus peaks (RiP)
rip_normalized <- dba.normalize(peak_counts, normalize = DBA_NORM_LIB,
library = DBA_LIBSIZE_PEAKREADS)
par(mfrow = c(1, 3))
dba.plotMA(peak_counts,
list(PR_Progestin = peak_counts$masks$PR_Progestin,
PR_Control = peak_counts$masks$PR_Control),
sub = "raw",
bNormalized = FALSE)
# Full library size normalized data
dba.plotMA(full_normalized,
list(PR_Progestin = peak_counts$masks$PR_Progestin,
PR_Control = peak_counts$masks$PR_Control),
sub = "Full LIB")
# RiP normalized data
dba.plotMA(rip_normalized,
list(PR_Progestin = peak_counts$masks$PR_Progestin,
PR_Control = peak_counts$masks$PR_Control),
sub = "RiP LIB")
# summary(dba.show(peak_counts)$Reads)
dba.plotMA(full_normalized,
list(RO = peak_counts$masks$RO,
PG = peak_counts$masks$PG),
sub = "Full LIB")
# Add two contrasts
full_normalized <- dba.contrast(full_normalized, contrast = c("Condition", "ER_Progestin", "ER_Control"))
full_normalized <- dba.contrast(full_normalized, contrast = c("Condition", "PR_Progestin", "PR_Control"))
# View contrasts
dba.show(full_normalized, bContrasts = TRUE)
# message(paste("Design:", full_normalized$design))
full_normalized <- dba.analyze(full_normalized)
dba.show(full_normalized, bContrasts = TRUE)
dbs <- dba.report(full_normalized, bDB = TRUE, bAll = FALSE, bGain = TRUE, bLoss = TRUE)
dba.show(dbs)
dba.plotVenn(dbs, dbs$masks$Gain, main = "ER-PR Gains")
names(full_normalized$masks)
# Get sites that gain binding affinity
gain_dbs <- dba.report(full_normalized, bDB = TRUE, bAll = FALSE, bGain = TRUE)
# Profile plot data
# profiles <- dba.plotProfile(full_normalized,
#                             sites = gain_dbs,
#                             merge = c(-DBA_REPLICATE),
#                             samples = list(ER = full_normalized$masks$ER,
#                                            PR = full_normalized$masks$PR,
#                                            p300 = full_normalized$masks$p300),
#                             labels = list(sites = c("ER-PR GAIN", "PR GAIN")))
#                                           samples = c("ER_Control", "ER_Progestin",
#                                                       "PR_Control", "PR_Progestin",
#                                                       "p300_Control", "p300_Progestin")))
# profiles <- dba.plotProfile(full_normalized,
#                             sites = gain_dbs,
#                             merge = list(c(1, 10, 19), # ER control
#                                          c(2, 3, 11, 12, 20, 21), # ER progesterone
#                                          c(4, 13, 22), # PR control
#                                          c(5, 6, 14, 15, 23, 24), # PR progesterone
#                                          c(7, 16, 25), # p300 control
#                                          c(8, 9, 17, 18, 26, 27)), # p300 progesterone
#                             labels = list(sites = c("ER-PR GAIN", "PR GAIN")))
profiles <- dba.plotProfile(full_normalized,
sites = gain_dbs,
samples = list(ER = full_normalized$masks$ER,
PR = full_normalized$masks$PR,
p300 = full_normalized$masks$p300),
merge = c(DBA_REPLICATE, DBA_TREATMENT),
labels = list(sites = c("PR GAIN", "ER-PR GAIN")),
samples = c("ER_Control", "ER_Progestin",
"PR_Control", "PR_Progestin",
"p300_Control", "p300_Progestin"))
names(full_normalized$masks)
# Get sites that gain binding affinity
gain_dbs <- dba.report(full_normalized, bDB = TRUE, bAll = FALSE, bGain = TRUE)
# Profile plot data
# profiles <- dba.plotProfile(full_normalized,
#                             sites = gain_dbs,
#                             merge = c(-DBA_REPLICATE),
#                             samples = list(ER = full_normalized$masks$ER,
#                                            PR = full_normalized$masks$PR,
#                                            p300 = full_normalized$masks$p300),
#                             labels = list(sites = c("ER-PR GAIN", "PR GAIN")))
#                                           samples = c("ER_Control", "ER_Progestin",
#                                                       "PR_Control", "PR_Progestin",
#                                                       "p300_Control", "p300_Progestin")))
# profiles <- dba.plotProfile(full_normalized,
#                             sites = gain_dbs,
#                             merge = list(c(1, 10, 19), # ER control
#                                          c(2, 3, 11, 12, 20, 21), # ER progesterone
#                                          c(4, 13, 22), # PR control
#                                          c(5, 6, 14, 15, 23, 24), # PR progesterone
#                                          c(7, 16, 25), # p300 control
#                                          c(8, 9, 17, 18, 26, 27)), # p300 progesterone
#                             labels = list(sites = c("ER-PR GAIN", "PR GAIN")))
profiles <- dba.plotProfile(full_normalized,
sites = gain_dbs,
samples = list(ER = full_normalized$masks$ER,
PR = full_normalized$masks$PR,
p300 = full_normalized$masks$p300),
merge = c(DBA_REPLICATE, DBA_TREATMENT),
labels = list(sites = c("PR GAIN", "ER-PR GAIN"),
samples = c("ER_Control", "ER_Progestin",
"PR_Control", "PR_Progestin",
"p300_Control", "p300_Progestin")))
# Show profile plot
dba.plotProfile(profiles)
dba.plotProfile(profiles)
pbmc3k_counts <- readRDS("~/University/Computational Biology/Genomics II/Practical_6/pbmc3k_counts.rds")
setwd("fill in the folder containing the matrix")
setwd("C:/Users/redds/Documents/University/Computational Biology/Genomics II/Practical_6")
x = readRDS("pbmc3k_counts.rds")
setwd("C:/Users/redds/Documents/University/Computational Biology/Genomics II/Practical_6")
x = readRDS("pbmc3k_counts.rds")
x
View(x)
View(x)
dim(x)
print(dim(x))
setwd("C:/Users/redds/Documents/University/Computational Biology/Genomics II/Practical_6")
x = readRDS("pbmc3k_counts.rds")
print(dim(x))
x <- x[rowSums(x[]) > 0,]
print(dim(x))
rowSums(x[]) > 0
setwd("C:/Users/redds/Documents/University/Computational Biology/Genomics II/Practical_6")
x = readRDS("pbmc3k_counts.rds")
print(dim(x))
library(ggplot2)
setwd("C:/Users/redds/Documents/GitHub/Iris-Clustering/Genomics-II-Group")
setwd("C:/Users/redds/Documents/GitHub/Iris-Clustering/Genomics-II-Group")
setwd("C:/Users/redds/Documents/GitHub/Genomics-II-Group/")
setwd("C:/Users/redds/Documents/GitHub/Genomics-II-Group")
read.table(file = "Tables_S1-4/Table_S2", sep = '\t', header = TRUE)
read.table(file = "/Tables_S1-4/Table_S2", sep = '\t', header = TRUE)
read.table(file = "Tables_S1-4/Table_S2.tsv", sep = '\t', header = TRUE)
setwd("C:/Users/redds/Documents/GitHub/Genomics-II-Group/")
read.table(file = "Tables_S1-4/Table_S2.tsv", sep = '\t', header = TRUE)
read.table(file = "Tables_S1-4/Table_S2.xlsx", sep = '\t', header = TRUE)
read.table(file = "Tables_S1-4/Table_S2.xlsx",
sep = "\t", header=TRUE)
read.table(file = "Tables_S1-4/Table_S2.xlsx", sep = '\t', header = TRUE)
read.table(file = "Tables_S1-4/Tablge_S2.xlsx", sep = '\t', header = TRUE)
read.table(file = "Tables_S1-4/Table_S2.xlsx", sep = '\t', header = TRUE)
read.table(file = "Tables_S1-4/Table_S2.xlsx", sep = '\t', header = TRUE,
skipNul = T)
read.table(readLines("Tables_S1-4/Table_S2.xlsx", warn = FALSE), sep = '\t', header = TRUE,
skipNul = T)
read.table(file = "Tables_S1-4/Table_S2.xlsx", sep = '\t', header = TRUE,
skipNul = T)
read.table(file = "Tables_S1-4/Table_S2.xlsx", sep = '\t', header = FALSE,
skipNul = T)
read.table(file = "Tables_S1-4/Table_S2.xlsx", sep = '\t', header = TRUE,
skipNul = T)
tab <- read.table(file = "Tables_S1-4/Table_S2.xlsx", sep = '\t', header = TRUE,
skipNul = T)
tab
View(tab)
install.packages("readxl")
library("readxl")
data<- read_excel("Tables_S1-4/Table_S2.xlsx")
data
View(data)
data<- read_excel("Tables_S1-4/Table_S2.xlsx", skip = 2)
data
View(data)
View(table_s2)
library("readxl")
setwd("C:/Users/redds/Documents/GitHub/Genomics-II-Group/")
# View table
table_s2 <- read_excel("Tables_S1-4/Table_S2.xlsx", skip = 2)
View(table_s2)
msk_met <- read.table(file = "Plot_2/WGD/msk_met_2021_clinical_data.tsv", sep = '\t', header = TRUE)
View(msk_met)
msk_met$Sample.ID == "Primary"
all(msk_met$Sample.ID == "Primary")
msk_met[which(msk_met$Sample.ID == "Primary")]
msk_met
summary(msk_met)
msk_met[which(msk_met$Sample.ID == "Primary"), ]
msk_met[, which(msk_met$Sample.ID == "Primary")]
View(msk_met[, which(msk_met$Sample.ID == "Primary")])
msk_met[which(msk_met$Sample.ID == "Primary")]
msk_met$Sample.ID
msk_met[which(msk_met$Sample.Type == "Primary")]
msk_met$Sample.Type == "Primary"
msk_met[which(msk_met$Sample.Type == "Primary"), ]
primary_samples <- msk_met[which(msk_met$Sample.Type == "Primary"), ]
metastatic_samples <- msk_met[which(msk_met$Sample.Type != "Primary"), ]
metastatic_samples
print(nrow(primary_samples))
print(nrow(metastatic_samples))
message(paste("Number of metastatic samples: ", nrow(metastatic_samples)))
message(paste("Number of primary samples: ", nrow(primary_samples)))
message(paste("Number of metastatic samples: ", nrow(metastatic_samples)))
View(msk_met)
metastatic_samples <- msk_met[which(msk_met$FGA != NA), ]
metastatic_samples
metastatic_samples <- msk_met[which(msk_met$FGA == NA), ]
metastatic_samples
new_DF <- msk_met[is.na(msk_met$FGA),]
new_DF
devtools::install_github("mskcc/facets-suite")
View(table_s2)
# View table
table_s2 <- read_excel("Tables_S1-4/Table_S2.xlsx", sheet =1, skip = 2)
# View table
table_s2a <- read_excel("Tables_S1-4/Table_S2.xlsx", sheet = 1, skip = 2)
table_s2a$alteration == "fga_facets"
table_s2a[which(table_s2a$alteration == "fga_facets"), ]
View(table_s2a[which(table_s2a$alteration == "fga_facets"), ])
facets_fga_df <- table_s2a[which(table_s2a$alteration == "fga_facets"), ]
sum(facets_fga_df$primary_n)
sum(facets_fga_df$primary_n) + sum(facets_fga_df$metastasis_n)
?facetsSuite::function_name
??facetsSuite::function_name
library(facetsSuite)
??facetsSuite::function_name
?facetsSuite::function_name
library(readxl)
library(facetsSuite)
warnings()
setwd("C:/Users/redds/Documents/GitHub/Genomics-II-Group/")
# View table
table_s2a <- read_excel("Tables_S1-4/Table_S2.xlsx", sheet = 1, skip = 2)
facetsSuite
?facetsSuite
remotes::install_github("mskcc/facets", build_vignettes = TRUE)
install.packages("Rtools")
remotes::install_github("mskcc/facets", build_vignettes = TRUE)
remotes::install_github("mskcc/pctGCdata")
remotes::install_github("mskcc/facets", build_vignettes = FALSE)
?facetsSuite
?facetsSuite::facetsSuite
?facetsSuite::`facetsSuite-package`
?facetsSuite::arm_level_changes
library(facetsSuite)
?facetsSuite::run_facets
library(pctGCdata)
test_read_counts
run_facets(test_read_counts, cval = 500, genome = 'hg38')
?facetsSuite::copy_number_scores
test_facets_output <- run_facets(test_read_counts, cval = 500, genome = 'hg38')
calculate_fraction_cna(test_facets_output$segs, test_facets_output$ploidy, 'hg38', 'em')
test_facets_output$segs
test_facets_output$ploidy
calculate_fraction_cna(test_facets_output$segs, test_facets_output$ploidy, 'hg38', 'em')
?facetsSuite::arm_level_changes
arm_level_changes(test_facets_output$segs, test_facets_output$ploidy, 'hg38', 'em')
?facetsSuite::copy_number_scores
?facetsSuite::check_fit
check_fit(test_facets_output)
?facetsSuite::run_facets
mutations <- read.table(file = "Plot_2/WGD/data_mutations.txt",
sep = '\t', header = TRUE)
mutations <- read.table(file = "Plot_2/WGD/data_mutations.txt",
header = FALSE,    # Whether to display the header (TRUE) or not (FALSE)
sep = "",          # Separator of the columns of the file
dec = ".")
mutations <- read.table(file = "Plot_2/WGD/data_mutations.txt",
header = FALSE,    # Whether to display the header (TRUE) or not (FALSE)
sep = "",          # Separator of the columns of the file
dec = ".")
mutations <- read.table(file = "Plot_2/WGD/data_mutations.txt",
header = FALSE, sep = "", dec = ".")
mutations <- read.table(file = "Plot_2/WGD/data_mutations.txt", header = TRUE)
mutations <- read.table(file = "Plot_2/WGD/data_mutations.txt",
header = TRUE, fill = TRUE)
View(mutations)
emptycols <- sapply(df, function (k) all(is.na(k)))
mutations2 <- mutations[!emptycols]
View(mutations2)
m <- mutations[,colSums(is.na(mutations))<nrow(mutations)]
m
View(m)
mutations <- mutations[ ,colSums(is.na(mutations)) < nrow(mutations)]
test_read_counts
View(mutations)
cna <- read.table(file = "Plot_2/WGD/data_cna.txt",
header = TRUE, fill = TRUE)
# Open mutation data
mutations <- read.table(file = "Plot_2/Data/data_mutations.txt",
header = TRUE, fill = TRUE)
mutations <- read.table(file = "Data/data_mutations.txt",
header = TRUE, fill = TRUE)
# Remove empty columns
mutations <- mutations[ ,colSums(is.na(mutations)) < nrow(mutations)]
cna <- read.table(file = "Data/data_cna.txt",
header = TRUE, fill = TRUE)
View(cna)
removeEmptyCols <- function(df) {
return df[ ,colSums(is.na(df)) < nrow(df)]
}
removeEmptyCols <- function(df) {
return(df[ ,colSums(is.na(df)) < nrow(df)])
}
# Open mutation data
mutations <- removeEmptyCols(read.table(file = "Data/data_mutations.txt",
header = TRUE, fill = TRUE))
cna
cna <- read.table(file = "Data/data_cna.txt",
header = TRUE, fill = TRUE)
View(cna)
cna_hg19 <- read.table(file = "Data/data_cna_hg19.seg",
header = TRUE, fill = TRUE)
View(cna_hg19)
View(test_read_counts)
snp-pileup-wrapper.R
sum(facets_fga_df$primary_n) + sum(facets_fga_df$metastasis_n)
library(readxl)
library(facetsSuite)
setwd("C:/Users/redds/Documents/GitHub/Genomics-II-Group/")
# View table
table_s2a <- read_excel("Tables_S1-4/Table_S2.xlsx", sheet = 1, skip = 2)
msk_met <- read.table(file = "Plot_2/WGD/msk_met_2021_clinical_data.tsv",
sep = '\t', header = TRUE)
primary_samples <- msk_met[which(msk_met$Sample.Type == "Primary"), ]
metastatic_samples <- msk_met[which(msk_met$Sample.Type != "Primary"), ]
message(paste("Number of primary samples: ", nrow(primary_samples)))
message(paste("Number of metastatic samples: ", nrow(metastatic_samples)))
# Find samples with FACETS
facets_fga_df <- table_s2a[which(table_s2a$alteration == "fga_facets"), ]
sum(facets_fga_df$primary_n) + sum(facets_fga_df$metastasis_n)
facets_fga_df
facets_fga_df$tumor_type
primary_samples
facets_fga_df$tumor_type
facets_fga_df
message(paste("Found ", sum(facets_fga_df$primary_n) + sum(facets_fga_df$metastasis_n))
)
message(paste("Found", sum(facets_fga_df$primary_n) +
sum(facets_fga_df$metastasis_n)))
message(paste("Found", sum(facets_fga_df$primary_n) + sum(facets_fga_df$metastasis_n),
"samples"))
message(paste("Found", sum(facets_fga_df$primary_n) + sum(facets_fga_df$metastasis_n),
"samples with FACETS FGA"))
message(paste("Found", sum(facets_fga_df$primary_n) + sum(facets_fga_df$metastasis_n),
"samples with FACETS data"))
facets_fga_df$tumor_type
facets_fga_df
table_s2a
View(table_s2a)
facets_fga_df
View(cna)
sv <- read.table(file = "Data/data_sv.txt",
header = TRUE, fill = TRUE)
sv <- read.table(file = "Data/data_sv.txt", sep = '\t',
header = TRUE, fill = TRUE)
sv <- read.table(file = "Data/data_sv.txt", sep = '\t', quote = "",
header = TRUE, fill = TRUE)
sv
View(sv)
